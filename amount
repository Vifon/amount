#!/bin/bash
#########################################################################
# Copyright (C) 2012-2013  Wojciech Siewierski                          #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#########################################################################

if ! command -v pmount &> /dev/null; then
    echo "Missing dependency: pmount" 1>&2
    exit 4
fi

COMMAND=$SHELL

while getopts "hnc:" ARG; do
    case "$ARG" in
        h)
            echo "\
Usage: amount [-n] sdXY
       amount [-n] /dev/sdXY

Options:
  -n            do not change directory"
            exit
            ;;
        n)
            NOCD=1
            ;;
        c)
            COMMAND=$OPTARG
            ;;
        ?)
            exit 5
            ;;
    esac
done
shift $[$OPTIND-1]

if [[ ! "$1" =~ '/' ]]; then
    DEV="/dev/$1"
else
    DEV="$1"
fi

BOLD=`tput bold`
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
RESET=`tput sgr0`

if [ ! -b "$DEV" ]; then
    echo "$BOLD$RED*$RESET $BOLD$DEV$RESET is not a block device" 1>&2
    exit 3
fi

MOUNTNAME="${DEV##*/}"

if [ -e "$HOME/.amount_map" ]; then
    if command -v lsblk &> /dev/null; then
        UUID=$(lsblk "$DEV" -o UUID | tail -n1)
        map-uuid-to-mount()
        {
            local MAPPING
            MAPPING=$(grep "^$1 ~" "$HOME/.amount_map")
            if [ $? = 0 ]; then
                echo "${MAPPING##* ~ }"
            else
                echo "$MOUNTNAME"
            fi
        }
        MOUNTNAME=$(map-uuid-to-mount "$UUID")
    else
        echo "$BOLD$YELLOW*$RESET ${BOLD}Warning:$RESET \`lsblk' not found, custom mount point disabled" 1>&2
    fi
fi

if ! pmount "$DEV" "$MOUNTNAME"; then
    echo "$BOLD$RED*$RESET Cannot mount $BOLD$DEV$RESET"
    exit 1
fi
echo "$BOLD$GREEN*$RESET $BOLD$DEV$RESET mounted"

# cleanup in case the terminal is closed before the shell bound to the mount
finish()
{
    kill $PID
    wait $PID
    cd /
    pumount "$DEV"
    exit $?
}
trap finish INT TERM HUP


[ -z "$NOCD" ] && cd "/media/$MOUNTNAME"

# We run the new shell in background so we can retrieve its PID
# for the possible cleanup later.  The current stdin is redirected
# to it and we call wait then so it behaves as if it was run in
# foreground.
AMOUNT_DEVICE=$DEV $COMMAND <&0 &
PID=$!
wait $PID

[ -z "$NOCD" ] && cd $OLDPWD

echo "$BOLD$YELLOW*$RESET Unmounting $BOLD$DEV$RESET..."
if pumount "$DEV"; then
    echo "$BOLD$GREEN*$RESET $BOLD$DEV$RESET unmounted"
else
    echo "$BOLD$RED*$RESET Cannot unmount $BOLD$DEV$RESET"
    exit 2
fi
